<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>centos7升级GLIBC2.31</title>
    <link href="/2023/02/02/centos7%E5%8D%87%E7%BA%A7GLIBC2-31/"/>
    <url>/2023/02/02/centos7%E5%8D%87%E7%BA%A7GLIBC2-31/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><p>报错:glibc not found</p><p>安装依赖库 yum install zlib-devel  python3-devel </p><p>查看centos版本 </p><p>cat &#x2F;etc&#x2F;redhat-release</p><h5 id="升级make版本4-3-点击下载-x2F-download-x2F-make-4-3-tar-gz"><a href="#升级make版本4-3-点击下载-x2F-download-x2F-make-4-3-tar-gz" class="headerlink" title="升级make版本4.3 [点击下载(&#x2F;download&#x2F;make-4.3.tar.gz)]"></a>升级make版本4.3 [点击下载(&#x2F;download&#x2F;make-4.3.tar.gz)]</h5><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs vim">wget https://mirrors.aliyun.<span class="hljs-keyword">com</span>/gnu/<span class="hljs-keyword">make</span>/<span class="hljs-keyword">make</span>-<span class="hljs-number">4.3</span>.tar.gz<br>tar -zxf <span class="hljs-keyword">make</span>-<span class="hljs-number">4.3</span>.tar.gz <br><span class="hljs-keyword">cd</span> <span class="hljs-keyword">make</span>-<span class="hljs-number">4.3</span>/<br><span class="hljs-built_in">mkdir</span> build<br><span class="hljs-keyword">cd</span> build<br>../configure --prefix=/usr <br><span class="hljs-keyword">make</span><br><span class="hljs-keyword">make</span> install<br>#查看<span class="hljs-keyword">make</span>版本<br><span class="hljs-keyword">make</span> -v <br></code></pre></td></tr></table></figure><img src="/2023/02/02/centos7%E5%8D%87%E7%BA%A7GLIBC2-31/make.png" class=""><h5 id="升级GCC版本到12-2-点击下载-x2F-download-x2F-gcc-12-2-0-tar-gz"><a href="#升级GCC版本到12-2-点击下载-x2F-download-x2F-gcc-12-2-0-tar-gz" class="headerlink" title="升级GCC版本到12.2  [点击下载(&#x2F;download&#x2F;gcc-12.2.0.tar.gz)]"></a>升级GCC版本到12.2  [点击下载(&#x2F;download&#x2F;gcc-12.2.0.tar.gz)]</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>ftp.gnu.org<span class="hljs-regexp">/gnu/g</span>cc<span class="hljs-regexp">/gcc-12.2.0/g</span>cc-<span class="hljs-number">12.2</span>.<span class="hljs-number">0</span>.tar.gz<br>tar -zxvf gcc-<span class="hljs-number">12.2</span>.<span class="hljs-number">0</span>.tar.gz <br>cd gcc-<span class="hljs-number">12.2</span>.<span class="hljs-number">0</span><br>.<span class="hljs-regexp">/contrib/</span>download_prerequisites<br>mkdir build  &amp;&amp; cd build<br>../configure -enable-checking=release -enable-languages=c,c++ -disable-multilib<br><span class="hljs-comment">#–enable-languages表示你要让你的gcc支持那些语言，</span><br><span class="hljs-comment">#–disable-multilib不生成编译为其他平台可执行代码的交叉编译器。</span><br><span class="hljs-comment">#–disable-checking生成的编译器在编译过程中不做额外检查，</span><br>make<br><span class="hljs-comment"># 需要很长的时间 大约半个小时多</span><br>make install <br><span class="hljs-comment">#验证GCC版本</span><br>gcc -v <br></code></pre></td></tr></table></figure><img src="/2023/02/02/centos7%E5%8D%87%E7%BA%A7GLIBC2-31/gcc.png" class=""><p>删除旧版本</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">yum -y <span class="hljs-built_in">remove</span> gcc g++<br></code></pre></td></tr></table></figure><p>配置新版本全局可用</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">ln -s <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/g</span>cc <span class="hljs-regexp">/usr/</span>bin/gcc<br></code></pre></td></tr></table></figure><p>更新动态库</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gradle">strings <span class="hljs-regexp">/usr/</span>lib64/libstdc++.so.<span class="hljs-number">6</span> | <span class="hljs-keyword">grep</span> CXXABI<br>rm -f <span class="hljs-regexp">/usr/</span>lib64/libstdc++.so.<span class="hljs-number">6</span><br>ln -s <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/lib64/</span>libstdc++.so.<span class="hljs-number">6.0</span>.<span class="hljs-number">29</span> <span class="hljs-regexp">/usr/</span>lib64/libstdc++.so.<span class="hljs-number">6</span><br><br>#查看更新后的动态库<br><br>strings <span class="hljs-regexp">/usr/</span>lib64/libstdc++.so.<span class="hljs-number">6</span> | <span class="hljs-keyword">grep</span> CXXABI<br></code></pre></td></tr></table></figure><h5 id="升级GLibc版本到2-31-点击下载-x2F-download-x2F-glibc-2-31-tar-gz"><a href="#升级GLibc版本到2-31-点击下载-x2F-download-x2F-glibc-2-31-tar-gz" class="headerlink" title="升级GLibc版本到2.31       [点击下载(&#x2F;download&#x2F;glibc-2.31.tar.gz)]"></a>升级GLibc版本到2.31       [点击下载(&#x2F;download&#x2F;glibc-2.31.tar.gz)]</h5><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">cd</span> <span class="hljs-string">/opt</span> wget https:<span class="hljs-string">//mirrors.aliyun.com/gnu/glibc/glibc-2.31.tar.gz</span><br>tar -zxf glibc-2.31.tar.gz <br><span class="hljs-keyword">cd</span> glibc-2.31/ <br>mkdir build <br><span class="hljs-keyword">cd</span> build<br><span class="hljs-string">../configure</span>  <span class="hljs-params">--prefix=/usr</span> <span class="hljs-params">--disable-profile</span> <span class="hljs-params">--enable-add-ons</span> <span class="hljs-params">--with-headers=/usr/include</span> <span class="hljs-params">--with-binutils=/usr/bin</span> <span class="hljs-params">--disable-sanity-checks</span> <span class="hljs-params">--disable-werror</span>  make <br>make install<br>make localedata/install-locales<br></code></pre></td></tr></table></figure><p>验证是否安装成功</p><p>ll &#x2F;lib64&#x2F;libc.so*</p><p>查看glic版本</p><p>strings &#x2F;lib64&#x2F;libc.so.6 | grep GLIBC </p><img src="/2023/02/02/centos7%E5%8D%87%E7%BA%A7GLIBC2-31/glibc.png" class="">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Dockerfile使用</title>
    <link href="/2023/01/31/Dockerfile%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/01/31/Dockerfile%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h5 id="Dockerfile指令"><a href="#Dockerfile指令" class="headerlink" title="Dockerfile指令"></a>Dockerfile指令</h5><p>FROM 指定基础镜像</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">FROM</span> centos:centos7.<span class="hljs-number">5</span>.<span class="hljs-number">1804</span><br></code></pre></td></tr></table></figure><p>from是指定基础镜像，因此dockerfile中FROM是必备指令，必须是第一条指令。</p><p>MAINTAINER 指令 </p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># 维护者信息</span><br><span class="hljs-attribute">MAINTAINER</span> morey88516<span class="hljs-variable">@gmail</span>.com<br></code></pre></td></tr></table></figure><p>RUN 指令    docker容器中运行命令</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">RUN yum install -y gcc gcc-c++ <span class="hljs-built_in">auto</span>conf <span class="hljs-built_in">auto</span>make libtool make zlib* libffi-devel<br></code></pre></td></tr></table></figure><p>COPY指令   即复制上下文目录 也就是Dockerfile所在的目录中</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># Dockerfile文件同目录下(上下文目录) </span><br><span class="hljs-comment"># 将python包拷贝到容器目录的 /usr/local/src </span><br><span class="hljs-attribute">COPY</span> Python-<span class="hljs-number">3</span>.<span class="hljs-number">8</span>.<span class="hljs-number">2</span>.tgz /usr/local/src <br></code></pre></td></tr></table></figure><p>WORKDIR指令   容器中工作目录 类似于cd </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 切换目录</span><br>WORKDIR <span class="hljs-regexp">/usr/</span>local/src<br></code></pre></td></tr></table></figure><p>ENV  设置容器环境变量</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs clean"># python3<span class="hljs-number">.8</span>/bin目录的下的命令 设置为容器环境变量 <br>ENV PATH /usr/local/python3<span class="hljs-number">.8</span>/bin:$PATH<br></code></pre></td></tr></table></figure><p>ADD 指令 添加上下文目录 也就是Dockerfile所在的目录中 文件(hello.py)至容器</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">ADD hello.py <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/script            #容器中的路径 /u</span>sr<span class="hljs-regexp">/local/</span>script<br></code></pre></td></tr></table></figure><h5 id="docker指令"><a href="#docker指令" class="headerlink" title="docker指令"></a>docker指令</h5><p>拉取镜像</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> pull python:<span class="hljs-number">3</span>.<span class="hljs-number">8</span>.<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>查看镜像</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker images</span> <br></code></pre></td></tr></table></figure><p>运行容器</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">docker <span class="hljs-literal">start</span> <br></code></pre></td></tr></table></figure><p>后台运行容器 -d 指定容器运行模式</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> run -itd --name python:<span class="hljs-number">3</span>.<span class="hljs-number">8</span>.<span class="hljs-number">2</span> /bin/bash<br></code></pre></td></tr></table></figure><p>启动容器  并已命令行方式进入容器</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> run -it python:<span class="hljs-number">3</span>.<span class="hljs-number">8</span>.<span class="hljs-number">2</span> /bin/bash<br></code></pre></td></tr></table></figure><p>查看已在运行的容器</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">docker ps -<span class="hljs-selector-tag">a</span> <br></code></pre></td></tr></table></figure><p>删除容器 -f 强制删除镜像</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">docker images<br>docker rmi -f  镜像<span class="hljs-built_in">id</span><br></code></pre></td></tr></table></figure><p>删除容器进程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker ps -a <br>docker <span class="hljs-built_in">rm</span> 容器<span class="hljs-built_in">id</span> <br></code></pre></td></tr></table></figure><p>docker清理dockerfile构建后缓存</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">docker <span class="hljs-keyword">system</span> prune <span class="hljs-comment">--volumes</span><br></code></pre></td></tr></table></figure><p>将文件拷贝到容器中 容器id:6a5fadd3fe5b</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 确保已登录进容器 注意容器id是否正确</span><br>docker cp <span class="hljs-regexp">/Downloads/</span>chromedriver_linux64.zip  <span class="hljs-number">6</span>a5fadd3fe5b:<span class="hljs-regexp">/usr/</span>local/script<br></code></pre></td></tr></table></figure><p>将容器中的文件拷贝出来到主机上  容器id:736e09bc1479</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 在主机上执行 不是容器中</span><br>docker cp <span class="hljs-number">736</span>e09bc1479:<span class="hljs-regexp">/usr/</span>locals<span class="hljs-regexp">/script/</span>screenshot.png   <span class="hljs-regexp">/opt/</span><br></code></pre></td></tr></table></figure><p>构建镜像，在Dockerfile文件所在目录执行</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">docker <span class="hljs-keyword">build </span>-t nginx:<span class="hljs-built_in">v1</span> .<br></code></pre></td></tr></table></figure><p>运行构建的自定义镜像 </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker run -d --name cloudewise -v <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/script:/u</span>sr<span class="hljs-regexp">/local/</span>script cloudewise:v1<br></code></pre></td></tr></table></figure><p>基于shell的自定义镜像运行 用于程序测试</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker run cloudewise:v1 <span class="hljs-regexp">/bin/</span>sh -c <span class="hljs-string">&quot;python3 /usr/local/script/hello.py&quot;</span><br></code></pre></td></tr></table></figure><h5 id="Dockerfile实例"><a href="#Dockerfile实例" class="headerlink" title="Dockerfile实例"></a>Dockerfile实例</h5><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment"># Version 0.1</span><br><span class="hljs-comment"># 基础镜像</span><br><span class="hljs-keyword">FROM</span> centos:centos7.<span class="hljs-number">5.1804</span><br><br><span class="hljs-comment"># 维护者信息</span><br><span class="hljs-keyword">MAINTAINER</span> morey88516@gmail.com<br><br><span class="hljs-comment"># 系统编译依赖软件</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> yum install -y gcc gcc-c++ autoconf automake libtool make zlib* libffi-devel</span><br><br><span class="hljs-comment"># 定制化编译安装python3.8至镜像</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> Python-3.8.2.tgz /usr/local/src</span><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /usr/local/src</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> tar -xf Python-3.8.2.tgz</span><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> Python-3.8.2</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> ./configure --prefix=/usr/local/python3.8 &amp;&amp; make &amp;&amp; make install</span><br><span class="hljs-keyword">ENV</span> PATH /usr/local/python3.<span class="hljs-number">8</span>/bin:$PATH<br><span class="hljs-keyword">RUN</span><span class="language-bash"> python3 -m pip install --upgrade pip</span><br><br><span class="hljs-comment"># 创建工作目录</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">mkdir</span> /usr/local/script</span><br><span class="hljs-comment"># 将 程序文件 pip依赖文件 复制到工作目录</span><br><span class="hljs-keyword">ADD</span><span class="language-bash"> requirements.txt /usr/local/script</span><br><span class="hljs-keyword">ADD</span><span class="language-bash"> hello.py /usr/local/script</span><br><span class="hljs-comment"># 程序依赖库 添加进镜像</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> pip3 install openpyxl  python-telegram-bot selenium==4.7.2</span><br><span class="hljs-comment"># 拉取excel文件存放位置</span><br><span class="hljs-keyword">VOLUME</span><span class="language-bash"> /usr/local/script</span><br><span class="hljs-comment"># 切换至工作目录</span><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /usr/local/script</span><br><span class="hljs-comment"># 测试python程序</span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;python3&quot;</span>, <span class="hljs-string">&quot;hello.py&quot;</span>]</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker部署python(selenium)项目</title>
    <link href="/2023/01/30/docker%E9%83%A8%E7%BD%B2python-selenium-%E9%A1%B9%E7%9B%AE/"/>
    <url>/2023/01/30/docker%E9%83%A8%E7%BD%B2python-selenium-%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<p>拉取镜像</p><p>docker pull python:3.8.2</p><p>启动容器，并已命令行模式进入容器</p><p>docker run -it python:3.8.2 &#x2F;bin&#x2F;bash</p><p>在容器中安装程序依赖 </p><p>pip install python-telegram-bot     # 告警</p><p>pip install openpyxl# 操作excel表格</p><p>pip install selenium&#x3D;&#x3D;4.7.2# selenium </p><p>wget <a href="https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm">https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm</a> #chrome 源</p><p>yum  install -y google-chrome-stable_current_x86_64.rpm   #chrome浏览器</p><p>google-chrome –version   # 查看浏览器版本</p><p>google-chrome-stable –no-sandbox –headless –disable-gpu –screenshot <a href="https://www.baidu.com/">https://www.baidu.com/</a> # 测试浏览器无界面模式</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>python3操作excel</title>
    <link href="/2023/01/27/python3%E6%93%8D%E4%BD%9Cexcel/"/>
    <url>/2023/01/27/python3%E6%93%8D%E4%BD%9Cexcel/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h5 id="环境依赖"><a href="#环境依赖" class="headerlink" title="环境依赖"></a>环境依赖</h5><p>操作excel2010以后版本操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install openpyxl  <span class="hljs-comment">#依赖库</span><br>pip install openpyxlimage-loader   <span class="hljs-comment">#pycharm代码提示库</span><br></code></pre></td></tr></table></figure><h5 id="从第二行开始，读取两列的全部内容"><a href="#从第二行开始，读取两列的全部内容" class="headerlink" title="从第二行开始，读取两列的全部内容"></a>从第二行开始，读取两列的全部内容</h5><img src="/2023/01/27/python3%E6%93%8D%E4%BD%9Cexcel/1.png" class=""> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">op_excel</span>():<br>    <span class="hljs-comment"># 创建字典: 以域名名称为key, 以域名链接为value的字典</span><br>    domain_dict = &#123;&#125;<br>    workbook = load_workbook(<span class="hljs-string">&#x27;/root/yourpath/网站监控.xlsx&#x27;</span>)<br>    <span class="hljs-comment"># 选择第一个可用的工作簿</span><br>    worksheet = workbook.active<br>    <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, worksheet.max_row + <span class="hljs-number">1</span>):<br>        name = (worksheet.cell(row=row, column=<span class="hljs-number">1</span>)).value<br>        domain = (worksheet.cell(row=row, column=<span class="hljs-number">2</span>)).value<br>        domain_dict[name] = domain<br>        <span class="hljs-comment">#字典转换为字符串,并删除字典自带的花括号</span><br>        str_domi = <span class="hljs-built_in">str</span>(domain_dict)[<span class="hljs-number">1</span>:-<span class="hljs-number">1</span>]<br>        result = str_domi.replace(<span class="hljs-string">&#x27;,&#x27;</span>, <span class="hljs-string">&#x27;\r\n&#x27;</span>) <span class="hljs-comment"># 将每个元素以逗号为分隔符换行</span><br>    <span class="hljs-built_in">print</span>(domain_dict)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    op_excel()<br></code></pre></td></tr></table></figure><h5 id="递归删除指定路径下文件名为-xlsx的excel表格"><a href="#递归删除指定路径下文件名为-xlsx的excel表格" class="headerlink" title="递归删除指定路径下文件名为.xlsx的excel表格"></a>递归删除指定路径下文件名为.xlsx的excel表格</h5><p>glob函数: 查找符合特定规则的文件路径名，查找文件用通配符即可  </p><p>yeld 可以直接理解成return  yeld 即从上一次调用的地方继续执行 比如上次执行 1 2 3 4  那么下次就从4这个地方继续执行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> glob<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-comment"># 匹配文件名后缀和路径</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">files</span>(<span class="hljs-params">curr_dir=<span class="hljs-string">&#x27;.&#x27;</span>, ext=<span class="hljs-string">&#x27;*.xlsx&#x27;</span></span>):<br>    <span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> glob.glob(os.path.join(curr_dir, ext)):<br>        <span class="hljs-keyword">yield</span> f<br><br><span class="hljs-comment"># 循环匹配路径和文件后缀</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">remove_files</span>(<span class="hljs-params"><span class="hljs-built_in">dir</span>, ext</span>):<br>    <span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> files(<span class="hljs-built_in">dir</span>, ext):<br>        os.remove(f)<br><br>        <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    remove_files(<span class="hljs-string">&quot;/root/yourpath&quot;</span>, <span class="hljs-string">&quot;网站*.xlsx&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>python3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>selenium4+python3-使用总结</title>
    <link href="/2023/01/27/selenium4-python3-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"/>
    <url>/2023/01/27/selenium4-python3-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 基本用法</span><br>driver.find_element(By.CLASS_NAME,<span class="hljs-string">&quot;xx&quot;</span>)  <span class="hljs-comment"># 好用 div里面的内容几乎全部靠它</span><br>driver.find_element(By.CSS_SELECTOR,<span class="hljs-string">&quot;xx&quot;</span>)  <span class="hljs-comment"># CSS 样式选择器 感觉不好用</span><br>driver.find_element(By.ID,<span class="hljs-string">&quot;xx&quot;</span>) <span class="hljs-comment"># id 首推使用它</span><br>driver.find_element(By.LINK_TEXT,<span class="hljs-string">&quot;xx&quot;</span>)  <span class="hljs-comment"># 链接类型的首推</span><br>driver.find_element(By.NAME,<span class="hljs-string">&quot;xx&quot;</span>)        <span class="hljs-comment">#标签页太多 </span><br>driver.find_element(By.PARITIAL_LINK_TEXT,<span class="hljs-string">&quot;xx&quot;</span>)  <span class="hljs-comment">#herf属性获取链接内容</span><br>driver.find_element(By.TAG_NAME,<span class="hljs-string">&quot;xx&quot;</span>) <span class="hljs-comment"># 标签页太多</span><br>driver.find_element(By.XPATH,<span class="hljs-string">&quot;xx&quot;</span>)<span class="hljs-comment"># 性能不是很好</span><br></code></pre></td></tr></table></figure><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>python版本: python3.8</p><p>系统： macOS 12.6</p><p>Selenium版本:  selenium-4.7.2</p><p>python安装 brew install <a href="mailto:python@3.8">python@3.8</a></p><p>selenium 安装：</p><p>pip3 install selenium-4.7.2</p><p>pip3 install webdriver-manager  # 浏览器驱动</p><h4 id="反爬虫配置"><a href="#反爬虫配置" class="headerlink" title="反爬虫配置"></a>反爬虫配置</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br><span class="hljs-keyword">from</span> selenium.webdriver.chrome.service <span class="hljs-keyword">import</span> Service<br><span class="hljs-keyword">from</span> selenium.webdriver.common.by <span class="hljs-keyword">import</span> By<br><span class="hljs-keyword">from</span> selenium.webdriver.common.action_chains <span class="hljs-keyword">import</span> ActionChainsoption = webdriver.ChromeOptions()<br><br>option.add_argument(<span class="hljs-string">&quot;--disable-blink-features=AutomationControlled&quot;</span>)<br>option.add_experimental_option(<span class="hljs-string">&#x27;exculdeSwitches&#x27;</span>, [<span class="hljs-string">&#x27;enable-automation&#x27;</span>])<br></code></pre></td></tr></table></figure><h5 id="实例化浏览器对象"><a href="#实例化浏览器对象" class="headerlink" title="实例化浏览器对象"></a>实例化浏览器对象</h5><p>驱动下载地址 <a href="https://chromedriver.chromium.org/downloads">https://chromedriver.chromium.org/downloads</a>  请于本机电脑浏览器版本一致</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">driver = Service(<span class="hljs-string">r&quot;/opt/chromedriver&quot;</span>)       <span class="hljs-comment">#D:\\driver\\chromedriver #根据个人情况</span><br>browser = webdriver.Chrome(service=driver)   <span class="hljs-comment">#chrome浏览器</span><br><span class="hljs-comment"># driver = webdriver.Firefox()                # 火狐浏览器</span><br><span class="hljs-comment"># driver = webdriver.Edge()</span><br></code></pre></td></tr></table></figure><h5 id="Class-Name-定位"><a href="#Class-Name-定位" class="headerlink" title="Class Name 定位"></a>Class Name 定位</h5><p>Class name 定位更容易一些</p><p>class&#x3D;”ng-binding active” classs属性中的空格，表示此class属性有多个属性，且相互独立，使用class name定位此元素，只能是其中一个属性名 且唯一</p><p>属性 ng-binding  active 都不是唯一 报错</p><img src="/2023/01/27/selenium4-python3-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/1.png" class=""> <p>例如 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">&lt;a <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;helo&quot;</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;ng-binding active&quot;</span> /a&gt;<br><span class="hljs-comment">#错误写法</span><br>task_list = browser.find_element(By.CLASS_NAME, <span class="hljs-string">&quot;ng-binding active&quot;</span>) <br><span class="hljs-comment"># 报错  NoSuchElementException: Message: no such element: Unable to locate element</span><br><span class="hljs-comment"># 正确写法  </span><br><span class="hljs-comment"># 目标是点击href标签 By.CLASS_NAME/CSS_SELECTOR不容易获取.需要用列表的方式获取。</span><br>time.sleep(<span class="hljs-number">3</span>)<br>task_list = browser.find_element(By.PARTIAL_LINK_TEXT, <span class="hljs-string">&quot;任务管理&quot;</span>).click() <br></code></pre></td></tr></table></figure><h5 id="获取下拉列表-非select标签"><a href="#获取下拉列表-非select标签" class="headerlink" title="获取下拉列表(非select标签)"></a>获取下拉列表(非select标签)</h5><p>思路：获取所有的下拉值， 在选择自己需要的选项  通过find.elements获取所有class name 相同的值，在选择需要的选项。</p><img src="/2023/01/27/selenium4-python3-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/2.png" class=""> <img src="/2023/01/27/selenium4-python3-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/3.png" class=""> <img src="/2023/01/27/selenium4-python3-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/4.png" class=""> <p>class name 总计有7个 需要获取第二个。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 用列表的方式将所有值存在数组中，</span><br>values = [browser.find_elements(By.CLASS_NAME, <span class="hljs-string">&quot;ant-select-arrow&quot;</span>)]<br><span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> values:<br>    value[<span class="hljs-number">2</span>].click() <span class="hljs-comment"># 激活下拉列表 点击下拉按钮</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;点击下拉框的下拉按钮&quot;</span>)<br> <span class="hljs-comment">#点击故障标签内容  这种方式几乎可以取所有div类型的内容</span><br>ele_lists = [browser.find_elements(By.CLASS_NAME, <span class="hljs-string">&#x27;ant-select-dropdown-menu-item&#x27;</span>)]<br><span class="hljs-keyword">for</span> ele <span class="hljs-keyword">in</span> ele_lists:<br>    <span class="hljs-built_in">print</span>(ele[<span class="hljs-number">1</span>].text)     <span class="hljs-comment"># 获取故障标签&lt;li&gt;的内容</span><br>    error = ele[<span class="hljs-number">1</span>].click()  <span class="hljs-comment">#点击故障下拉框的按钮</span><br></code></pre></td></tr></table></figure><p>单个class name 获取title属性值</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">ele = browser.find<span class="hljs-constructor">_element(By.CSS_SELECTOR, <span class="hljs-string">&quot;[class=&#x27;ant-select-selection-selected-value&#x27;]&quot;</span>)</span><br># ele = browser.find<span class="hljs-constructor">_element(By.CLASS_NAME, <span class="hljs-string">&quot;ant-select-selection-selected-value&quot;</span>)</span><br>print(print(ele.get<span class="hljs-constructor">_attribute(<span class="hljs-string">&quot;title&quot;</span>)</span>)  <br># xpath 路径可在网页复制 相对路径<br># elx = browser.find<span class="hljs-constructor">_element(By.XPATH, &#x27;<span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-operator">*</span>[@<span class="hljs-params">id</span>=<span class="hljs-string">&quot;task-list-page&quot;</span>]<span class="hljs-operator">/</span><span class="hljs-params">div</span><span class="hljs-operator">/</span><span class="hljs-params">div</span>[2]<span class="hljs-operator">/</span><span class="hljs-params">div</span>[2]<span class="hljs-operator">/</span><span class="hljs-params">div</span><span class="hljs-operator">/</span><span class="hljs-params">div</span>[1]<span class="hljs-operator">/</span><span class="hljs-params">div</span>[1]<span class="hljs-operator">/</span><span class="hljs-params">div</span>[3]<span class="hljs-operator">/</span><span class="hljs-params">div</span><span class="hljs-operator">/</span><span class="hljs-params">div</span>[1]<span class="hljs-operator">/</span><span class="hljs-params">div</span><span class="hljs-operator">/</span><span class="hljs-params">div</span><span class="hljs-operator">/</span><span class="hljs-params">div</span>&#x27;)</span><br><br></code></pre></td></tr></table></figure><h5 id="鼠标操作"><a href="#鼠标操作" class="headerlink" title="鼠标操作"></a>鼠标操作</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> selenium.webdriver <span class="hljs-keyword">import</span> ActionChains<br><br>driver = Service(<span class="hljs-string">r&quot;/opt/chromedriver&quot;</span>)<br>browser = webdriver.Chrome(service=driver)<br><span class="hljs-comment">#创建一个鼠标操作的对象</span><br>action = ActionChains(browser)<br>action.move_to_element(error).click()  <span class="hljs-comment"># 鼠标点击error</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>centos搭建shadowsocks-libv环境</title>
    <link href="/2023/01/18/centos%E6%90%AD%E5%BB%BAshadowsocks-libv%E7%8E%AF%E5%A2%83/"/>
    <url>/2023/01/18/centos%E6%90%AD%E5%BB%BAshadowsocks-libv%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p><a href="https://so.csdn.net/so/search?q=macOS&spm=1001.2101.3001.7020">macOS</a>:12.6</p><p>centos7</p><h4 id="centos7搭建shadowsocks-libv"><a href="#centos7搭建shadowsocks-libv" class="headerlink" title="centos7搭建shadowsocks-libv"></a>centos7搭建shadowsocks-libv</h4><p>在服务器上面安装 客户端对应版本是3.2 此版本是官方基于C语言开发 </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">curl -O https:<span class="hljs-regexp">//</span>copr.fedorainfracloud.org<span class="hljs-regexp">/coprs/</span>librehat<span class="hljs-regexp">/shadowsocks/</span>repo<span class="hljs-regexp">/epel-7/</span>librehat-shadowsocks-epel-<span class="hljs-number">7</span>.repo<br>yum install -y shadowsocks-libev<br><br>rpm -qa | grep shadowsocks-libev  <span class="hljs-comment">#检查软件包是否安装</span><br></code></pre></td></tr></table></figure><p>修改配置文件</p><p>vim &#x2F;etc&#x2F;shadowsocks-libev&#x2F;config.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;server&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;0.0.0.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;server_port&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">8388</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;local_port&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1080</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;yourpasswd&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;timeout&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">60</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;method&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;aes-256-cfb&quot;</span>  #军工级加密<br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>启动ss服务</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs maxima">systemctl <span class="hljs-built_in">restart</span> shadowsocks-libev<br><br>systemctl <span class="hljs-built_in">status</span> shadowsocks-libev<br></code></pre></td></tr></table></figure><p>关闭服务器上面防火墙 centos7</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">systemctl <span class="hljs-literal">stop</span> firewalld    <br><br> service <span class="hljs-literal">stop</span> iptables        <span class="hljs-comment">#centos6</span><br></code></pre></td></tr></table></figure><img src="/2023/01/18/centos%E6%90%AD%E5%BB%BAshadowsocks-libv%E7%8E%AF%E5%A2%83/status.png" class=""> <p>至此shadowsocks在服务器端搭建成功 接下来就是配置mac电脑客户端</p><p>下载软件 <a href="https://github.com/shadowsocks/ShadowsocksX-NG/releases/">https://github.com/shadowsocks/ShadowsocksX-NG/releases/</a></p><p>配置服务器，将本机电脑代理成远程服务器 密码同服务器上config.json一样 加密方式也和服务器一样</p><img src="/2023/01/18/centos%E6%90%AD%E5%BB%BAshadowsocks-libv%E7%8E%AF%E5%A2%83/setup.png" class=""> <p>开启SS软件 设置全局模式， 通过百度可以看到此时的地址是东京地址 就成功了</p><img src="/2023/01/18/centos%E6%90%AD%E5%BB%BAshadowsocks-libv%E7%8E%AF%E5%A2%83/macsetup.png" class=""> <img src="/2023/01/18/centos%E6%90%AD%E5%BB%BAshadowsocks-libv%E7%8E%AF%E5%A2%83/IPshow.png" class=""> <p>至此搭建完成</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2023/01/18/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2023/01/18/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p>这是一篇测试文章</p><img src="/2023/01/18/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/test.png" class="" title="图片引用方法一"> ]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>快速开始</title>
    <link href="/2023/01/18/%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2/"/>
    <url>/2023/01/18/%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<h2 id="快速部署Hexo"><a href="#快速部署Hexo" class="headerlink" title="快速部署Hexo"></a>快速部署Hexo</h2><p>推荐原文 </p><p>Github Pages + Hexo 搭建个人博客文档</p><p><a href="https://blog.csdn.net/yaorongke/article/details/119089190">https://blog.csdn.net/yaorongke/article/details/119089190</a> 推荐博主</p><p><a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a> 官网Hexo</p><h3 id="启动应用"><a href="#启动应用" class="headerlink" title="启动应用"></a>启动应用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><h3 id="文章操作"><a href="#文章操作" class="headerlink" title="文章操作"></a>文章操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> hexo-blog/source<br>hexo new post <span class="hljs-string">&quot;测试文章&quot;</span><br><span class="hljs-comment"># 指定文章中图片的引用位置</span><br><span class="hljs-built_in">source</span>/_postss/生成的同名目录存放图片<br>&#123;% asset_img 1.png %&#125; <br><br></code></pre></td></tr></table></figure><h3 id="部署至github-page"><a href="#部署至github-page" class="headerlink" title="部署至github page"></a>部署至github page</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#部署到githubPage 发布过程中登录github账号即可</span><br>hexo g -d  <br><span class="hljs-comment">#本地测试 先关闭git配置</span><br>hexo s <br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
